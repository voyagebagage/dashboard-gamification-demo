# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY {
#   globalAuthRule: AuthRule = { allow: public }
# } # FOR TESTING ONLY!
type Client
  @model
  @searchable
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  category: String
    @index(
      name: "clientByfirstName"
      sortKeyFields: ["firstName"]
      queryField: "clientByfirstName"
    )
    @index(
      name: "clientBylastName"
      sortKeyFields: ["lastName"]
      queryField: "clientBylastName"
    )
  firstName: String!
  lastName: String!
  email: AWSEmail!
  phone: AWSPhone!
  companyName: String!
  website: AWSURL!
  country: String!
  campaigns: [Campaign]! @hasMany # @hasMany(indexName: "byEndDate", fields: "id") #field could be category, firstName, LastName
  notes: String
}
# add campaigns together
type Agent
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin", "Agent", "Client"] }
      { allow: owner }
      { allow: private, provider: userPools, operations: [read] }
    ]
  ) {
  # @auth(#
  #   rules: [
  # { allow: groups, groups: ["Admin", "Agent"] }
  #     { allow: owner, ownerField: "username", operations: [read] }
  #   ]
  # )
  id: ID
  category: String
    @index(
      name: "agentByDailyPoints"
      sortKeyFields: ["dailyPoints"]
      queryField: "agentByDailyPoints"
    )
    @index(
      name: "agentByWeeklyPoints"
      sortKeyFields: ["weeklyPoints"]
      queryField: "agentByWeeklyPoints"
    )
    @index(
      name: "agentByMonthlyPoints"
      sortKeyFields: ["monthlyPoints"]
      queryField: "agentByMonthlyPoints"
    )
    @index(
      name: "agentByTotalPoints"
      sortKeyFields: ["totalPoints"]
      queryField: "agentByTotalPoints"
    )
    @index(
      name: "agentByName"
      sortKeyFields: ["name"]
      queryField: "agentByName"
    )
  name: String!
  email: AWSEmail!
  teamID: ID @index(name: "byTeam", sortKeyFields: ["name"]) # or teamName: Team @belongsTo
  campaigns: [Campaign]! @hasMany # before @connection(name: "CampaignAgent")
  kpis: [Kpi]! @hasMany(indexName: "byKpiName", fields: ["id"]) # kpis: [Kpi]! @connection(name: "AgentKpis", sortField: "target")
  dailyReports: [DailyReport]! @hasMany # dailyReports: [DailyReport]! @connection(name: "AgentDailyReports")
  dailyPoints: Int
  weeklyPoints: Int
  monthlyPoints: Int
  yearPoints: [YearPoints]! @hasMany(indexName: "byDate", fields: ["id"]) #@connection(name: "YearPoints", sortField: "date")
  totalPoints: Int
}

type Campaign
  @model
  @searchable
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  name: String!
  category: String
    @index(
      name: "campaignById"
      sortKeyFields: ["id"]
      queryField: "campaignById"
    )
    @index(
      name: "campaignByCreatedAt"
      sortKeyFields: ["createdAt"]
      queryField: "campaignByCreatedAt"
    )
  type: String!
    @index(
      name: "campaignByType"
      sortKeyFields: ["length"]
      queryField: "campaignTypeByLength"
    )
    @index(
      name: "byEndDate"
      sortKeyFields: ["endDate"]
      queryField: "campaignByEndDate"
    )
  client: Client! @belongsTo
  agent: Agent! @belongsTo
  startDate: AWSDate!
  endDate: AWSDate!
  createdAt: AWSDateTime
  status: String #cannot put Boolean for sorting, will be "true"/"false/"not yet"/"done"
  length: Float!
  notes: String
  dailyReports: [DailyReport!]!
    @hasMany(indexName: "byCreatedAt", fields: ["id"]) #  or @connection(name: "CampaignDailyReports", sortField: "createdAt")
  weeklyReports: [WeeklyReport!]! @hasMany
  monthlyReports: [MonthlyReport!]! @hasMany
  kpis: [Kpi!]! @hasMany # kpis: [Kpi!]! @connection(name: "CampaignKpis")
}
type Team
  @model
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  name: String!
  agents: [Agent]! @hasMany(indexName: "byTeam", fields: ["id"]) # or agents: [Agent]! @connection(name: "TeamAgent")
  dailyPoints: Int
  weeklyPoints: Int
  monthlyPoint: Int
  totalPoints: Int
}

type YearPoints
  @model
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  agentID: ID @index(name: "byDate", sortKeyFields: ["date"])
  month: String
  date: AWSDate!
}
# ####################################################################
# #                           REPORTS                               #
# ####################################################################
##--------------- WEEKLY -----------------------##
type WeeklyReport
  @model
  @searchable
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  campaignID: ID!
    @index(
      name: "byCampaignWeeklyReports"
      queryField: "weeklyReportByCampaign"
    )
  campaign: Campaign! @belongsTo(fields: ["campaignID"])
  dailyReports: [DailyReport] @hasMany
  createdAt: AWSDateTime
  weeklyTarget: Int!
  ## monthlyReport: MonthlyReport @belongsTo
  weeklyPoints: Int
  willBeActiveOn: AWSDateTime
}
##--------------- MONTHLY -----------------------##
type MonthlyReport
  @model
  @searchable
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  campaignID: ID!
    @index(
      name: "byCampaignMonthlyReports"
      queryField: "monthlyReportByCampaign"
    )
  campaign: Campaign! @belongsTo(fields: ["campaignID"]) # campaign: Campaign! @connection(name: "CampaignMonthlyReports")
  createdAt: AWSDateTime
  monthlyTarget: Int!
  weeklyReports: [WeeklyReport]! @hasMany
  monthlyPoints: Int
}

# ##--------------- DAIlY -----------------------##
type DailyReport
  @model
  @searchable
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  campaignID: ID! @index(name: "byCreatedAt", sortKeyFields: ["createdAt"])
  campaign: Campaign! @belongsTo(fields: ["campaignID"])
  agent: Agent! @belongsTo # agent: Agent! @connection(name: "AgentDailyReports")
  kpis: [Kpi!]! @hasMany
  date: AWSDate
  createdAt: AWSDateTime
  dailyTarget: Int
  ## weeklyReport: WeeklyReport @belongsTo
  dailyPoints: Int
  weeklyTarget: Int #it might be taken off
}
###################################################################

###################################################################
type Kpi
  @model
  @searchable
  @auth(rules: [{ allow: groups, groups: ["Admin", "Agent", "Client"] }]) {
  id: ID
  agentID: ID! @index(name: "byKpiName", sortKeyFields: ["name"])
  name: String!  #category
    @index(
      name: "byResult"
      sortKeyFields: ["result"]
      queryField: "kpiByResult"
    )
    @index(
      name: "byTarget"
      sortKeyFields: ["target"]
      queryField: "kpiByTarget"
    )
  campaign: Campaign! @belongsTo # OR campaign: Campaign! @connection(ame: "CampaignKpis")
  result: Int
  target: Int!
  coeff: Int!
  nextWeekTarget: Int
  dailyReport: DailyReport! @belongsTo # dailyReport: DailyReport! @connection(name: "DailyReportKpis")
  agent: Agent! @belongsTo(fields: ["agentID"]) # agent: Agent! @connection(name: "AgentKpis", sortField: "name")
}

###################################################################
#Functions
###################################################################
type Timezone {
  datetime: String
  timezone: String
}
type Query {
  getTimezone(timezone: String!): Timezone
    @function(name: "timeApi-${env}")
    @auth(
      rules: [
        { allow: groups, groups: ["Admin", "Agent", "Client"] }
        { allow: owner }
        { allow: private, provider: userPools }
      ]
    )
}
